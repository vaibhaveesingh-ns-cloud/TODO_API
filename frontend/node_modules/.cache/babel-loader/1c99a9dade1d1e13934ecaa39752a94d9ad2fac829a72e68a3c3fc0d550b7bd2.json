{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  login: async (username, password) => {\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('password', password);\n    const response = await api.post('/auth/token', formData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    return response.data;\n  },\n  verifyEmail: async token => {\n    const response = await api.get(`/auth/verify-email?token=${token}`);\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  }\n};\n\n// Todos API\nexport const todosAPI = {\n  getTodos: async () => {\n    const response = await api.get('/todos/');\n    return response.data;\n  },\n  createTodo: async todoData => {\n    const response = await api.post('/todos/', todoData);\n    return response.data;\n  },\n  updateTodo: async (todoId, todoData) => {\n    const response = await api.put(`/todos/${todoId}`, todoData);\n    return response.data;\n  },\n  deleteTodo: async todoId => {\n    const response = await api.delete(`/todos/${todoId}`);\n    return response.data;\n  },\n  getTodo: async todoId => {\n    const response = await api.get(`/todos/${todoId}`);\n    return response.data;\n  }\n};\n\n// Admin API\nexport const adminAPI = {\n  // Dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/admin/dashboard/stats');\n    return response.data;\n  },\n  // Users management\n  getUsers: async () => {\n    const response = await api.get('/admin/users');\n    return response.data;\n  },\n  getUsersWithStats: async () => {\n    const response = await api.get('/admin/users/detailed');\n    return response.data;\n  },\n  getUserTodos: async userId => {\n    const response = await api.get(`/admin/users/${userId}/todos`);\n    return response.data;\n  },\n  promoteUser: async userId => {\n    const response = await api.post(`/admin/users/${userId}/promote`);\n    return response.data;\n  },\n  demoteUser: async userId => {\n    const response = await api.post(`/admin/users/${userId}/demote`);\n    return response.data;\n  },\n  activateUser: async userId => {\n    const response = await api.post(`/admin/users/${userId}/activate`);\n    return response.data;\n  },\n  deactivateUser: async userId => {\n    const response = await api.post(`/admin/users/${userId}/deactivate`);\n    return response.data;\n  },\n  deleteUser: async userId => {\n    const response = await api.delete(`/admin/users/${userId}`);\n    return response.data;\n  },\n  // Todos management\n  getAllTodos: async (filters = {}) => {\n    const params = new URLSearchParams();\n    if (filters.user_id) params.append('user_id', filters.user_id);\n    if (filters.completed !== undefined) params.append('completed', filters.completed);\n    if (filters.limit) params.append('limit', filters.limit);\n    if (filters.offset) params.append('offset', filters.offset);\n    const response = await api.get(`/admin/todos?${params.toString()}`);\n    return response.data;\n  },\n  deleteTodo: async todoId => {\n    const response = await api.delete(`/admin/todos/${todoId}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authAPI","register","userData","post","data","login","username","password","formData","FormData","append","verifyEmail","get","getCurrentUser","todosAPI","getTodos","createTodo","todoData","updateTodo","todoId","put","deleteTodo","delete","getTodo","adminAPI","getDashboardStats","getUsers","getUsersWithStats","getUserTodos","userId","promoteUser","demoteUser","activateUser","deactivateUser","deleteUser","getAllTodos","filters","params","URLSearchParams","user_id","completed","undefined","limit","offset","toString"],"sources":["/Users/vaibhavee/project/TODO_fastapi/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  register: async (userData) => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  login: async (username, password) => {\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('password', password);\n    \n    const response = await api.post('/auth/token', formData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    });\n    return response.data;\n  },\n\n  verifyEmail: async (token) => {\n    const response = await api.get(`/auth/verify-email?token=${token}`);\n    return response.data;\n  },\n\n  getCurrentUser: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n};\n\n// Todos API\nexport const todosAPI = {\n  getTodos: async () => {\n    const response = await api.get('/todos/');\n    return response.data;\n  },\n\n  createTodo: async (todoData) => {\n    const response = await api.post('/todos/', todoData);\n    return response.data;\n  },\n\n  updateTodo: async (todoId, todoData) => {\n    const response = await api.put(`/todos/${todoId}`, todoData);\n    return response.data;\n  },\n\n  deleteTodo: async (todoId) => {\n    const response = await api.delete(`/todos/${todoId}`);\n    return response.data;\n  },\n\n  getTodo: async (todoId) => {\n    const response = await api.get(`/todos/${todoId}`);\n    return response.data;\n  },\n};\n\n// Admin API\nexport const adminAPI = {\n  // Dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/admin/dashboard/stats');\n    return response.data;\n  },\n\n  // Users management\n  getUsers: async () => {\n    const response = await api.get('/admin/users');\n    return response.data;\n  },\n\n  getUsersWithStats: async () => {\n    const response = await api.get('/admin/users/detailed');\n    return response.data;\n  },\n\n  getUserTodos: async (userId) => {\n    const response = await api.get(`/admin/users/${userId}/todos`);\n    return response.data;\n  },\n\n  promoteUser: async (userId) => {\n    const response = await api.post(`/admin/users/${userId}/promote`);\n    return response.data;\n  },\n\n  demoteUser: async (userId) => {\n    const response = await api.post(`/admin/users/${userId}/demote`);\n    return response.data;\n  },\n\n  activateUser: async (userId) => {\n    const response = await api.post(`/admin/users/${userId}/activate`);\n    return response.data;\n  },\n\n  deactivateUser: async (userId) => {\n    const response = await api.post(`/admin/users/${userId}/deactivate`);\n    return response.data;\n  },\n\n  deleteUser: async (userId) => {\n    const response = await api.delete(`/admin/users/${userId}`);\n    return response.data;\n  },\n\n  // Todos management\n  getAllTodos: async (filters = {}) => {\n    const params = new URLSearchParams();\n    if (filters.user_id) params.append('user_id', filters.user_id);\n    if (filters.completed !== undefined) params.append('completed', filters.completed);\n    if (filters.limit) params.append('limit', filters.limit);\n    if (filters.offset) params.append('offset', filters.offset);\n    \n    const response = await api.get(`/admin/todos?${params.toString()}`);\n    return response.data;\n  },\n\n  deleteTodo: async (todoId) => {\n    const response = await api.delete(`/admin/todos/${todoId}`);\n    return response.data;\n  },\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAE7E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACI,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC1BM,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,OAAO,GAAG;EACrBC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,MAAMZ,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;IAC3D,OAAOZ,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDC,KAAK,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACnC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IACrCE,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;IAErC,MAAMjB,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAEK,QAAQ,EAAE;MACvD3B,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOS,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDO,WAAW,EAAE,MAAOzB,KAAK,IAAK;IAC5B,MAAMI,QAAQ,GAAG,MAAMZ,GAAG,CAACkC,GAAG,CAAC,4BAA4B1B,KAAK,EAAE,CAAC;IACnE,OAAOI,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDS,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,MAAMvB,QAAQ,GAAG,MAAMZ,GAAG,CAACkC,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOtB,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,QAAQ,GAAG;EACtBC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMzB,QAAQ,GAAG,MAAMZ,GAAG,CAACkC,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOtB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDY,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,MAAM3B,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,SAAS,EAAEc,QAAQ,CAAC;IACpD,OAAO3B,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDc,UAAU,EAAE,MAAAA,CAAOC,MAAM,EAAEF,QAAQ,KAAK;IACtC,MAAM3B,QAAQ,GAAG,MAAMZ,GAAG,CAAC0C,GAAG,CAAC,UAAUD,MAAM,EAAE,EAAEF,QAAQ,CAAC;IAC5D,OAAO3B,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDiB,UAAU,EAAE,MAAOF,MAAM,IAAK;IAC5B,MAAM7B,QAAQ,GAAG,MAAMZ,GAAG,CAAC4C,MAAM,CAAC,UAAUH,MAAM,EAAE,CAAC;IACrD,OAAO7B,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDmB,OAAO,EAAE,MAAOJ,MAAM,IAAK;IACzB,MAAM7B,QAAQ,GAAG,MAAMZ,GAAG,CAACkC,GAAG,CAAC,UAAUO,MAAM,EAAE,CAAC;IAClD,OAAO7B,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMoB,QAAQ,GAAG;EACtB;EACAC,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,MAAMnC,QAAQ,GAAG,MAAMZ,GAAG,CAACkC,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOtB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAsB,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMpC,QAAQ,GAAG,MAAMZ,GAAG,CAACkC,GAAG,CAAC,cAAc,CAAC;IAC9C,OAAOtB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDuB,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,MAAMrC,QAAQ,GAAG,MAAMZ,GAAG,CAACkC,GAAG,CAAC,uBAAuB,CAAC;IACvD,OAAOtB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDwB,YAAY,EAAE,MAAOC,MAAM,IAAK;IAC9B,MAAMvC,QAAQ,GAAG,MAAMZ,GAAG,CAACkC,GAAG,CAAC,gBAAgBiB,MAAM,QAAQ,CAAC;IAC9D,OAAOvC,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED0B,WAAW,EAAE,MAAOD,MAAM,IAAK;IAC7B,MAAMvC,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,gBAAgB0B,MAAM,UAAU,CAAC;IACjE,OAAOvC,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED2B,UAAU,EAAE,MAAOF,MAAM,IAAK;IAC5B,MAAMvC,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,gBAAgB0B,MAAM,SAAS,CAAC;IAChE,OAAOvC,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED4B,YAAY,EAAE,MAAOH,MAAM,IAAK;IAC9B,MAAMvC,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,gBAAgB0B,MAAM,WAAW,CAAC;IAClE,OAAOvC,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED6B,cAAc,EAAE,MAAOJ,MAAM,IAAK;IAChC,MAAMvC,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,gBAAgB0B,MAAM,aAAa,CAAC;IACpE,OAAOvC,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED8B,UAAU,EAAE,MAAOL,MAAM,IAAK;IAC5B,MAAMvC,QAAQ,GAAG,MAAMZ,GAAG,CAAC4C,MAAM,CAAC,gBAAgBO,MAAM,EAAE,CAAC;IAC3D,OAAOvC,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACA+B,WAAW,EAAE,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;IACnC,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIF,OAAO,CAACG,OAAO,EAAEF,MAAM,CAAC3B,MAAM,CAAC,SAAS,EAAE0B,OAAO,CAACG,OAAO,CAAC;IAC9D,IAAIH,OAAO,CAACI,SAAS,KAAKC,SAAS,EAAEJ,MAAM,CAAC3B,MAAM,CAAC,WAAW,EAAE0B,OAAO,CAACI,SAAS,CAAC;IAClF,IAAIJ,OAAO,CAACM,KAAK,EAAEL,MAAM,CAAC3B,MAAM,CAAC,OAAO,EAAE0B,OAAO,CAACM,KAAK,CAAC;IACxD,IAAIN,OAAO,CAACO,MAAM,EAAEN,MAAM,CAAC3B,MAAM,CAAC,QAAQ,EAAE0B,OAAO,CAACO,MAAM,CAAC;IAE3D,MAAMrD,QAAQ,GAAG,MAAMZ,GAAG,CAACkC,GAAG,CAAC,gBAAgByB,MAAM,CAACO,QAAQ,CAAC,CAAC,EAAE,CAAC;IACnE,OAAOtD,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDiB,UAAU,EAAE,MAAOF,MAAM,IAAK;IAC5B,MAAM7B,QAAQ,GAAG,MAAMZ,GAAG,CAAC4C,MAAM,CAAC,gBAAgBH,MAAM,EAAE,CAAC;IAC3D,OAAO7B,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;AAED,eAAe1B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}