#!/usr/bin/env python3
"""
Gmail SMTP Setup Helper for TaskMaster
This script helps you configure Gmail for email verification
"""

import os
import getpass
from pathlib import Path

def create_env_file():
    """Interactive setup for Gmail SMTP configuration"""
    print("🚀 Gmail SMTP Setup for TaskMaster")
    print("=" * 50)
    
    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        print("⚠️  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("❌ Setup cancelled.")
            return
    
    print("\n📧 Gmail Configuration Setup")
    print("Before proceeding, make sure you have:")
    print("1. ✅ Enabled 2-Factor Authentication on Gmail")
    print("2. ✅ Generated an App Password for Mail")
    print("\nIf you haven't done this, follow the guide in GMAIL_SETUP_GUIDE.md")
    
    proceed = input("\nReady to proceed? (y/N): ").lower().strip()
    if proceed != 'y':
        print("❌ Setup cancelled. Please complete the prerequisites first.")
        return
    
    # Collect Gmail credentials
    print("\n📝 Enter your Gmail credentials:")
    
    gmail_address = input("Gmail address: ").strip()
    if not gmail_address.endswith('@gmail.com'):
        print("⚠️  Warning: This doesn't look like a Gmail address")
    
    print("\n🔑 Enter your Gmail App Password (16 characters):")
    print("   Format: xxxx xxxx xxxx xxxx")
    app_password = getpass.getpass("App Password: ").strip().replace(' ', '')
    
    if len(app_password) != 16:
        print("⚠️  Warning: App passwords are usually 16 characters long")
    
    # Email secret key
    print("\n🔐 Enter a secret key for email tokens (or press Enter for default):")
    secret_key = input("Secret key: ").strip()
    if not secret_key:
        secret_key = "taskmaster-email-secret-change-me-in-production"
    
    # Frontend URL
    print("\n🌐 Frontend URL (press Enter for default: http://localhost:3000):")
    frontend_url = input("Frontend URL: ").strip()
    if not frontend_url:
        frontend_url = "http://localhost:3000"
    
    # Create .env content
    env_content = f"""# Gmail SMTP Configuration for TaskMaster
# Generated by setup_gmail.py

# Gmail SMTP Settings
SMTP_USERNAME={gmail_address}
SMTP_PASSWORD={app_password}
FROM_EMAIL={gmail_address}
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587

# Application Settings
EMAIL_SECRET_KEY={secret_key}
FRONTEND_URL={frontend_url}

# Security Note: Never commit this file to version control!
"""
    
    # Write .env file
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        
        print("\n✅ Gmail SMTP configuration saved to .env file!")
        print("\n📋 Next steps:")
        print("1. Restart your backend server: python3 run_local.py")
        print("2. Register a new user to test email verification")
        print("3. Check your Gmail inbox for verification email")
        
        print(f"\n📧 Test configuration:")
        print(f"   Gmail: {gmail_address}")
        print(f"   SMTP: smtp.gmail.com:587")
        print(f"   Frontend: {frontend_url}")
        
        print("\n🔒 Security reminders:")
        print("   - .env file is in .gitignore (won't be committed)")
        print("   - Use App Password, not regular Gmail password")
        print("   - Keep your credentials secure")
        
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")
        return
    
    # Test configuration
    test = input("\n🧪 Test email configuration now? (y/N): ").lower().strip()
    if test == 'y':
        test_email_config(gmail_address, app_password)

def test_email_config(username, password):
    """Test the Gmail SMTP configuration"""
    print("\n🧪 Testing Gmail SMTP configuration...")
    
    try:
        import smtplib
        
        # Test connection
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(username, password)
        server.quit()
        
        print("✅ Gmail SMTP connection successful!")
        print("   Your email configuration is working correctly.")
        
    except ImportError:
        print("❌ smtplib not available (this is unusual)")
    except smtplib.SMTPAuthenticationError:
        print("❌ Authentication failed!")
        print("   - Check your Gmail address")
        print("   - Verify you're using App Password (not regular password)")
        print("   - Ensure 2FA is enabled on Gmail")
    except smtplib.SMTPConnectError:
        print("❌ Connection failed!")
        print("   - Check your internet connection")
        print("   - Verify SMTP server: smtp.gmail.com:587")
    except Exception as e:
        print(f"❌ Test failed: {e}")

def show_status():
    """Show current email configuration status"""
    print("📊 Current Email Configuration Status")
    print("=" * 40)
    
    env_file = Path(".env")
    if not env_file.exists():
        print("❌ No .env file found")
        print("   Run: python3 setup_gmail.py")
        return
    
    # Check environment variables
    required_vars = [
        'SMTP_USERNAME', 'SMTP_PASSWORD', 'FROM_EMAIL', 
        'SMTP_SERVER', 'SMTP_PORT', 'EMAIL_SECRET_KEY'
    ]
    
    print("📁 .env file exists: ✅")
    
    # Load and check variables
    env_vars = {}
    with open(env_file) as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key] = value
    
    print("\n🔍 Configuration check:")
    for var in required_vars:
        if var in env_vars and env_vars[var]:
            if var == 'SMTP_PASSWORD':
                print(f"   {var}: ✅ (hidden)")
            else:
                print(f"   {var}: ✅ {env_vars[var]}")
        else:
            print(f"   {var}: ❌ Missing or empty")
    
    if all(var in env_vars and env_vars[var] for var in required_vars):
        print("\n✅ Configuration looks complete!")
    else:
        print("\n⚠️  Configuration incomplete - run setup again")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "status":
        show_status()
    else:
        create_env_file()
